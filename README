# Django Picklefield

**Django Picklefield** provides an implementation of a pickled object field that can store any picklable Python object in a database field.

This package is based on [Django snippet #1694](http://www.djangosnippets.org/snippets/1694/) by Taavi Taijala, itself inspired by [Django snippet #513](http://www.djangosnippets.org/snippets/513/) by Oliver Beattie.

Django Picklefield is available under the MIT license.

## Table of Contents
- [Installation](#installation)
- [Usage](#usage)
- [Notes](#notes)
- [Original Author's Notes](#original-authors-notes)
- [Changelog](#changelog)
- [Feedback](#feedback)

## Installation

### 1. Install using pip

First, install the latest version of **django-picklefield** from PyPI using pip:

```bash
pip install django-picklefield
```

### 2. Add to `INSTALLED_APPS`

After installing, add `picklefield` to your `INSTALLED_APPS` in your Django settings:

```python
# settings.py

INSTALLED_APPS = [
    # Other apps...
    'picklefield',
]
```

### 3. Setup Virtual Environment (Optional but Recommended)

To avoid dependency conflicts and isolate the project, it's recommended to create a virtual environment before installing the package:

```bash
# Create a virtual environment
python -m venv env

# Activate the virtual environment (Windows)
.\env\Scripts\activate

# Activate the virtual environment (macOS/Linux)
source env/bin/activate

# Install django-picklefield inside the virtual environment
pip install django-picklefield
```

### 4. Database Migrations

If you are adding the `PickledObjectField` to a model in an existing project, don’t forget to create and apply migrations:

```bash
# Create migrations
python manage.py makemigrations

# Apply migrations
python manage.py migrate
```

## Usage

To use the pickled object field, define it in your Django model:

```python
from picklefield.fields import PickledObjectField
from django.db import models

class SomeObject(models.Model):
    args = PickledObjectField()
```

You can assign any picklable object to the field:

```python
obj = SomeObject()
obj.args = ['fancy', {'objects': 'inside'}]
obj.save()
```

## Notes

If you need to serialize a `PickledObjectField` for transmission to the browser, you may need to subclass the field and override the `value_to_string()` method. By default, the field serializes as a base64-encoded pickle, which can be difficult to parse in a browser.

For more convenient serialization, you can customize the `value_to_string()` method to output in a different format.

## Original Author's Notes

Here are the original author's (Taavi Taijala) notes:

- Useful for storing any picklable object in the database when there isn’t a specific field for it.
- **PickledObjectField** is database-agnostic, working across all backends.
- Automatically converts objects without manual pickling.
- Supports `exact`, `in`, and `isnull` lookups when querying.
- Values returned from `QuerySet.values()` will only contain encoded data, not the original Python object.

### Improvements
This field includes several improvements over snippet #513:
- Solves the `DjangoUnicodeDecodeError` issue by base64 encoding the pickled output, ensuring all stored data is ASCII.
- Optionally compresses pickled objects using zlib (set `compress=True`).
- Supports custom pickle protocols using the `protocol` keyword argument.
- Addresses issues when using `cPickle` with complex data types.
- Supports `isnull` lookups properly with the default `null=True` for the field.

## Changelog

### Version 0.1.8
- Updated link to code repository.

### Version 0.1.7
- Added `connection` and `prepared` parameters to `get_db_prep_lookup()` to remove deprecation warnings in Django 1.2.

### Version 0.1.6
- Fixed South support (thanks aehlke@github).

### Version 0.1.5
- Added support for South.
- Changed default to `null=False` to align with Django conventions.

### Version 0.1.4
- Updated copyright statements.

### Version 0.1.3
- Updated serialization tests (thanks to Michael Fladischer).

### Version 0.1.2
- Added Simplified BSD license.

### Version 0.1.1
- Added test for serialization.
- Added note about JSON serialization for the browser.
- Added support for different pickle protocol versions (thanks to Michael Fladischer).

### Version 0.1
- First public release.

## Feedback

For more information and access to the code repository, visit the project’s [GitHub page](http://github.com/gintas/django-picklefield).

If you have feedback or suggestions, feel free to send them to [gintautas@miliauskas.lt](mailto:gintautas@miliauskas.lt).
